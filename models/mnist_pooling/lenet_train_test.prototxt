name: "LeNet"
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
# Uncomment to use original pooling
# layer {
#   name: "pool1"
#   type: "Pooling"
#   bottom: "conv1"
#   top: "pool1"
#   pooling_param {
#     pool: MAX
#     kernel_size: 2
#     stride: 2
#   }
# }
# Uncomment to use gated pooling
# layer {
#   name: "pool1"
#   top: "pool1"
#   bottom: "conv1"
#   type: "TreepoolMaxAve"
#   param {
#     lr_mult: 1
#     decay_mult: 1
#   }
#   convolution_param {
#     kernel_size: 3
#     stride: 2
#     weight_filler {
#       type: "gaussian"
#       std: 0.1
#     }
#   }
# }
# Uncomment to use 2-level Tree Pooling
# layer {
#   name: "pool1"
#   top: "pool1"
#   bottom: "conv1"
#   type: "TreepoolKernel1L"
#   param {
#     lr_mult: 1
#     decay_mult: 1
#   }
#   convolution_param {
#     kernel_size: 3
#     stride: 2
#     weight_filler {
#       type: "gaussian"
#       std: 0.5
#     }
#   }
# }
# Uncomment to use 3-level Tree Pooling
layer {
  name: "pool1"
  top: "pool1"
  bottom: "conv1"
  type: "TreepoolKernel2L"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.5
    }
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
# Uncomment to use original pooling
# layer {
#   name: "pool2"
#   type: "Pooling"
#   bottom: "conv1"
#   top: "pool2"
#   pooling_param {
#     pool: MAX
#     kernel_size: 2
#     stride: 2
#   }
# }
# Uncomment to use gated pooling
# layer {
#   name: "pool2"
#   top: "pool2"
#   bottom: "conv1"
#   type: "TreepoolMaxAve"
#   param {
#     lr_mult: 1
#     decay_mult: 1
#   }
#   convolution_param {
#     kernel_size: 3
#     stride: 2
#     weight_filler {
#       type: "gaussian"
#       std: 0.1
#     }
#   }
# }
# Uncomment to use 2-level Tree Pooling
# layer {
#   name: "pool2"
#   top: "pool2"
#   bottom: "conv1"
#   type: "TreepoolKernel1L"
#   param {
#     lr_mult: 1
#     decay_mult: 1
#   }
#   convolution_param {
#     kernel_size: 3
#     stride: 2
#     weight_filler {
#       type: "gaussian"
#       std: 0.5
#     }
#   }
# }
# Uncomment to use 3-level Tree Pooling
layer {
  name: "pool2"
  top: "pool2"
  bottom: "conv1"
  type: "TreepoolKernel2L"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.5
    }
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
