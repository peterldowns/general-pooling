name: "SVHN Tree + Gated Max-Avg Pooling"
layer {
  name: "data"
  type: "data"
  top: "data"
  top: "label"
  data_param {
    source: "models/svhn_pooling/svhn-leveldb/svhn-train-leveldb"
    batch_size: 128
  }
}
# Convolution(3, 3, 128) #1
layer {
  type: "convolution"
  name: "conv1"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1.
    decay_mult: 1.
  }
  param {
    lr_mult: 2.
    decay_mult: 0.
  }
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  type: "relu"
  name: "conv1_relu"
  bottom: "conv1"
  top: "conv1"
}
# Convolution(3, 3, 128) #2
layer {
  type: "convolution"
  name: "conv2"
  bottom: "conv1"
  top: "conv2"
  param {
    lr_mult: 1.
    decay_mult: 1.
  }
  param {
    lr_mult: 2.
    decay_mult: 0.
  }
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  type: "relu"
  name: "conv2_relu"
  bottom: "conv2"
  top: "conv2"
}
# CCCP(1, 1, 96) #1
layer {
  type: "convolution"
  name: "cccp1_1"
  bottom: "conv2"
  top: "cccp1_1"
  param {
    lr_mult: 1.
    decay_mult: 1.
  }
  param {
    lr_mult: 2.
    decay_mult: 0.
  }
  convolution_param {
    num_output: 96
    kernel_size: 1
    group: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "cccp1_1_relu"
  type: "relu"
  bottom: "cccp1_1"
  top: "cccp1_1"
}
layer {
  name: "cccp1_2"
  type: "convolution"
  bottom: "cccp1_1"
  top: "cccp1_2"
  param {
    lr_mult: 1.
    decay_mult: 1.
  }
  param {
    lr_mult: 2.
    decay_mult: 0.
  }
  convolution_param {
    num_output: 96
    kernel_size: 1
    group: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "cccp1_2_relu"
  type: "relu"
  bottom: "cccp1_2"
  top: "cccp1_2"
}
# 3x3 3 level tree pool #1
# TODO: check out 2 level?
layer {
  name: "treepool1"
  type: "TreepoolKernel2L"
  top: "treepool1"
  bottom: "cccp1_2"
  param {
    lr_mult: 1.
    decay_mult: 1.
  }
  convolution_param {
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.5
    }
  }
}
layer {
  name: "dropout1"
  type: "dropout"
  bottom: "treepool1"
  top: "treepool1"
  dropout_param {
    dropout_ratio: 0.5
  }
}
# XXX
# Convolution(3, 3, 320) #3
layer {
  type: "convolution"
  name: "conv3"
  bottom: "treepool1"
  top: "conv3"
  param {
    lr_mult: 1.
    decay_mult: 1.
  }
  param {
    lr_mult: 2.
    decay_mult: 0.
  }
  convolution_param {
    num_output: 320
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  type: "relu"
  name: "conv3_relu"
  bottom: "conv3"
  top: "conv3"
}
# Convolution(3, 3, 320) #4
layer {
  type: "convolution"
  name: "conv4"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1.
    decay_mult: 1.
  }
  param {
    lr_mult: 2.
    decay_mult: 0.
  }
  convolution_param {
    num_output: 320
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  type: "relu"
  name: "conv4_relu"
  bottom: "conv4"
  top: "conv4"
}
# CCCP(1, 1, 256) #2
layer {
  type: "convolution"
  name: "cccp2_1"
  bottom: "conv4"
  top: "cccp2_1"
  param {
    lr_mult: 1.
    decay_mult: 1.
  }
  param {
    lr_mult: 2.
    decay_mult: 0.
  }
  convolution_param {
    num_output: 256
    kernel_size: 1
    group: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "cccp2_1_relu"
  type: "relu"
  bottom: "cccp2_1"
  top: "cccp2_1"
}
layer {
  name: "cccp2_2"
  type: "convolution"
  bottom: "cccp2_1"
  top: "cccp2_2"
  param {
    lr_mult: 1.
    decay_mult: 1.
  }
  param {
    lr_mult: 2.
    decay_mult: 0.
  }
  convolution_param {
    num_output: 256
    kernel_size: 1
    group: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "cccp2_2_relu"
  type: "relu"
  bottom: "cccp2_2"
  top: "cccp2_2"
}
# 3x3 Gated Max Average Pool
layer {
  name: "gatedpool1"
  top: "gatedpool1"
  bottom: "cccp2_2"
  type: "TreepoolMaxAve"
  param {
    lr_mult: 1.
    decay_mult: 1.
  }
  convolution_param {
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
  }
}
layer {
  name: "dropout2"
  type: "dropout"
  bottom: "gatedpool1"
  top: "gatedpool1"
  dropout_param {
    dropout_ratio: 0.5
  }
}
# YYY
# Convolution(3, 3, 384) #5
layer {
  type: "convolution"
  name: "conv5"
  bottom: "gatedpool1"
  top: "conv5"
  param {
    lr_mult: 1.
    decay_mult: 1.
  }
  param {
    lr_mult: 2.
    decay_mult: 0.
  }
  convolution_param {
    num_output: 384
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  type: "relu"
  name: "conv5_relu"
  bottom: "conv5"
  top: "conv5"
}
# Convolution(3, 3, 384) #6
layer {
  type: "convolution"
  name: "conv6"
  bottom: "conv5"
  top: "conv6"
  param {
    lr_mult: 1.
    decay_mult: 1.
  }
  param {
    lr_mult: 2.
    decay_mult: 0.
  }
  convolution_param {
    num_output: 384
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  type: "relu"
  name: "conv6_relu"
  bottom: "conv6"
  top: "conv6"
}
# CCCP(1, 1, 256) #3
layer {
  type: "convolution"
  name: "cccp3_1"
  bottom: "conv6"
  top: "cccp3_1"
  param {
    lr_mult: 1.
    decay_mult: 1.
  }
  param {
    lr_mult: 2.
    decay_mult: 0.
  }
  convolution_param {
    num_output: 256
    kernel_size: 1
    group: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "cccp3_1_relu"
  type: "relu"
  bottom: "cccp3_1"
  top: "cccp3_1"
}
layer {
  name: "cccp3_2"
  type: "convolution"
  bottom: "cccp3_1"
  top: "cccp3_2"
  param {
    lr_mult: 1.
    decay_mult: 1.
  }
  param {
    lr_mult: 2.
    decay_mult: 0.
  }
  convolution_param {
    num_output: 256
    kernel_size: 1
    group: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "cccp3_2_relu"
  type: "relu"
  bottom: "cccp3_2"
  top: "cccp3_2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "cccp3_2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "cccp3_2"
  bottom: "label"
  top: "loss"
}
